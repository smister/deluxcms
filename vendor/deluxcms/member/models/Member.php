<?php

namespace deluxcms\member\models;

class Member extends \common\models\User
{
    const SCENARIO_NEW_MEMBER = 'new_member';
    const SCENARIO_CHANGE_PWD = 'change_member_password';

    public $password;
    public $repassword;

    public static function tableName()
    {
        return '{{%member}}';
    }

    public function rules()
    {
        return [
            [['username', 'email', 'nickname'], 'required', 'message' => '不能为空'],
            ['username', 'match', 'pattern' => '/^[\w]{1,255}$/', 'message' => '用户名只能为1~255的字母或数字'],
            ['username', 'unique', 'message' => '用户名已经被使用'],
            ['email', 'email', 'message' => '邮箱的格式错误'],
            ['email', 'unique', 'message' => '邮箱已经被使用'],
            [['status', 'sex', 'email_validate'], 'in', 'range' => [0, 1], 'message' => '选项不合法'],
            ['password', 'trim', 'on' => [self::SCENARIO_NEW_MEMBER, self::SCENARIO_CHANGE_PWD]],
            ['password', 'string', 'on' => [self::SCENARIO_NEW_MEMBER, self::SCENARIO_CHANGE_PWD], 'min' => 6, 'max' => 255, 'tooShort' => '密码的长度不能小于6位', 'tooLong' => '密码的长度不能大于255'],
            ['repassword', 'compare', 'compareAttribute' => 'password', 'skipOnEmpty' => false, 'message' => '两次密码不一致'],
            ['nickname', 'string', 'max' => 50, 'message' => '昵称的长度不能大于50位'],
            [['address', 'avatar'], 'string', 'max' => 255, 'message' => '昵称的长度不能大于255位'],
            ['registration_ip', 'string', 'max' => 15, 'message' => '昵称的长度不能大于15位'],
        ];
    }

    public function beforeSave($insert)
    {
        if ($this->password) {
            $this->setPassword($this->password);
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => '用户名',
            'email' => '邮箱',
            'status' => '状态',
            'password' => '密码',
            'repassword' => '确认密码',
            'created_at' => '创建时间',
            'updated_at' => '更新时间',
            'nickname' => '昵称',
            'avatar' => '头像',
            'address' => '地址',
            'sex' => '性别',
            'registration_ip' => '注册ip',
            'email_validate' => '邮箱是否验证',
        ];
    }

    public static function getMemberByValiableEmail($email)
    {
        return self::find()->where(['email' => $email, 'email_validate' => 1])->one();
    }

    /**
     * 判断邮箱是否被验证
    */
    public static function isValidateEmail($email)
    {
        return self::find()->where(['email' => $email, 'email_validate' => 1])->exists();
    }
}